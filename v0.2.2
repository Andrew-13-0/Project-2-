# --------Class that Uses information on which area is impacted to assess the damage--------

class ImpactedPerson:
    def __init__ (self,name, address, biome, damage):
        self.name = name
        self.address = address
        self.biome = biome
        self.damage = damage
        self.FireSpreadChance = 0

    # Assessing how likely the fire spread based on humidity and wind speed
    
    def FireSpreadAssessment(self, RalativeHumidityPercent, WindSpeedPercent):
        print(f"\n-- Fire Spread Assesment for {self.name} at {self.address}")
        
        if  RalativeHumidityPercent <= 0.15 :
            self.FireSpreadChance += 1
            print("The humidity icreases the likelyhood of fire spreading.")
        else:
            print("The humidity decreases the likelyhood fire spreading.")
        
        if  WindSpeedPercent >= 0.1 :
            self.FireSpreadChance += 1
            print("the wind speed increases the likelyhood of spreading fire")
        else:
            print( "the wind speed decreases the likelyhood of spreading fire")
        if self.FireSpreadChance == 0:
            print("Assessment: Safe")
        elif  self.FireSpreadChance == 1:
            print("Assessment: Caution")
        elif self.FireSpreadChance == 2:
            print("Assessment: Danger")


# --------Adds Queue System--------
class HelpQueue:
    def __init__ (self):
        self.__Queue = []
        self.__PriorityQueue = []
        
    # Adds person to the Standard queue   
    def AddToQueue(self,person):
        if person.damage == "Severely Damaged" :
            self.__PriorityQueue.append(person)
            print(f"{person.name} is added to Priority queue")
            
        else:
            self.__Queue.append(person)
            print(f"{person.name} is added to queue")

    # Removes people from both queues starting with the Priority and ending with the Standard 
    def RemoveFromQueue(self):
        if len(self.__PriorityQueue) > 0:
            person = self.__PriorityQueue.pop(0)
            print(f"{person.name} removed from Priority queue")
        elif len(self.__Queue) > 0:
            person = self.__Queue.pop(0)
            print(f"{person.name} removed from queue")
        else:
            print("No one is in the queue")


#Testing

print ("\n------ Creating Persons ------\n" )

Person1 = ImpactedPerson("Teddy", "666 No-brainy Ave", "Forest", "Moderately Damaged")
Person2 = ImpactedPerson("Amie", "1234 Impact Road", "Mountain", "Severely Damaged")
Person3 = ImpactedPerson("Jill", "367 Green Valley", "Grassland", "Minor Damaged")
Person4 = ImpactedPerson("Tom", "3213 Nothing Road", "Forest", "Severely Damaged")

print ("\n------ Fire Risk Assessment ------\n" )

Person1.FireSpreadAssessment(0.18, 0.25)
Person2.FireSpreadAssessment(0.15, 0.20)
Person3.FireSpreadAssessment(0.30, 0.40)

print ("\n------ Adding to queue ------\n" )

queue = HelpQueue()
queue.AddToQueue(Person1)
queue.AddToQueue(Person2)
queue.AddToQueue(Person3)
queue.AddToQueue(Person4)

print ("\n------ Removing From queue ------\n" )

queue.RemoveFromQueue()
queue.RemoveFromQueue()
queue.RemoveFromQueue()
queue.RemoveFromQueue()
queue.RemoveFromQueue()





