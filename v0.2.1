# --------Class that Uses information on which area is impacted to assess the damage--------

class Impact:
    def __init__ (self, address, biome, damage):
        self.name = name
        self.address = address
        self.biome = biome
        self.damage = damage
        self.FireSpreadChance = 0

    # Assessing how likely the fire spread based on humidity and wind speed
    
    def FireSpreadAssessment(self, RalativeHumidityPercent, WindSpeedPercent):
        print(f"\n-- Fire Spread Assesment for {self.name} at {self.address}")
        
        if  RalativeHumidityPercent <= 0.15 :
            self.FireSpreadChance += 1
            print("The humidity icreases the likelyhood of fire spreading.")
        else:
            print("The humidity decreases the likelyhood fire spreading.")
        
        if  WindSpeedPercent >= 0.1 :
            self.FireSpreadChance += 1
            print("the wind speed increases the likelyhood of spreading fire")
        else:
            print( "the wind speed decreases the likelyhood of spreading fire")
        if self.FireSpreadChance == 0:
            print("Assessment: Safe")
        elif  self.FireSpreadChance == 1:
            print("Assessment: Caution")
        elif self.FireSpreadChance == 2:
            print("Assessment: Danger")

        return self.FirstSpreadChance


# --------Adds Queue System--------
class HelpQueue:
    def __init__ (self):
        self.queue = []
        self.Pqueue = []
        
    # Adds person to the Standard queue   
    def AddStrandardQueue(self,person):
        if person.damage == "Severely Dameged" or person.FireSpreadChance == 2:
        self.priority_queue.append(person)
        print(f"{person} is added to queue")

    # Adds person to the Piority queue 
    def AddPriorityQueue(self,person):
        self.Piority_queue.append(person)
        print(f"{person} is added to Priority queue")

    # Removes people from both queues starting with the Priority and ending with the Standard 
    def removeQueue(self):
        if len(self.Pqueue) > 0:
            person = self.Pqueue.pop()
            print(f"{person} removed from Priority queue")
        elif len(self.queue) > 0:
            person = self.queue.pop()
            print(f"{person} removed from queue")
        else:
            print("No one in queue")



print ("\n------ Adding to queue ------\n" )
# creating people and areas affected by wildfire'

impact1 = Impact("Teddy", "666 No-brainy Ave", "Forest", "Moderately Damaged")
impacg2 = Impact("Amie", "1234 Impact Road", "Mountain", "Severely Damaged")
impact3 = Impact("Jill", "367 Green Valley", "Grassland", "Minor Damaged")

# Asses Fire Risk

impact1.FireSpreadAssessment(0.18, 0.25)
impact2.FirstSpreadAssessment(0.15, 0.20)
impact3.FireSPreadAssesment(0.30, 0.40)

# Queue people based on assesment and damage
queue = HelpQueue()
queue.AddToQueue(impact1)
queue.AddToQueue(impact2)
queue.AddToQueue(impact3)

queue.RemoveFromQueue()
queue.RemoveFromQueue()
queue.RemoveFromQueue()



